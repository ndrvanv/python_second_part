import re, string  
#Дз                                            
# Дан список повторяющихся элементов. Вернуть список с дублирующимися элементами. 
# В результирующем списке не должно быть дубликатов.

# my_list = [12, 12, 1, 5, 3, 54, 66, 5, 1, 0, 23, 2]
# print(my_list)
# new_list = []
# for i in my_list:
#     if my_list.count(i) == 2:
#         new_list.append(i)
# print(set(new_list))

# В большой текстовой строке подсчитать количество встречаемых слов и вернуть 10 самых частых. 
# Не учитывать знаки препинания и регистр символов. 
# За основу возьмите любую статью из википедии или из документации к языку.

big_str = """Концепция окна дискурса была предложена Джозефом Овертоном в середине 1990-х годов во время работы 
в Макинакском центре публичной политики[en] как удобная модель для оценки суждений по степени их приемлемости для 
открытого политического обсуждения[5]. Концепция активно использовалась во внутренних семинарах центра, но впервые 
была сформулирована в публикации для широкой публики лишь в 2006 году, через три года после гибели Овертона[6][4]. 
Идея окна дискурса получила признание, а сотрудники Макинакского центра приложили много усилий для популяризации и 
развития идеи, создав цикл материалов, посвящённых окну Овертона[5][7].
Неоконсервативный публицист и политик Джошуа Тревиньо  (англ.)рус. развил идею окна дискурса, предложив в 2006 году 
шестиступенчатую оценочную шкалу для классификации идей по степени их допустимости в открытом обсуждении и указал на 
шкале границы окна дискурса. Также Тревиньо высказал мысль, что изменение рамок окна Овертона может быть использовано 
для сознательного смещения общественного консенсуса[8][9]. Позже концепция была развита и популяризирована политическим 
комментатором Гленном Беком в книжном триллере Окно Овертона  (англ.)рус.[10]. Также и сам Бек изначально заявлял, что 
его роман лишь видоизменил идею Овертона о том, что «политик получает поддержку в зависимости от приемлемости его идей 
аудиторией» в «теорию заговора, где это окно не определяет допустимость слов политика для его аудитории, а определяет 
саму норму через политиков»[11]. После этого уже преобразованная идея окна была опубликована Джо Картером в его исследовании 
«Как уничтожить культуру за 5 простых шагов» (How to destroy a culture in 5 easy steps), спонсированном религиозным центром[12]. 
Сама работа подверглась огромной критике, но ввиду шума вокруг неё, идея о заговоре стала крайне популярной среди населения США, 
а потом и всего мира[13][14].Так, изначальная идея Овертона о том, что политики вынуждены подстраиваться под мнение общества, 
была преобразована в теорию заговора о том, что политики формируют мнение общества в тех или иных вопросах[8][15]. """

# text = big_str.lower()

# lst = []
# st = ''
# text = text.translate(str.maketrans("","", string.punctuation))
# text = re.sub("[0-9]","", text)

# worlds = text.split()
# world_count = {}
# #print(worlds)

# for world in worlds:
#     if world in world_count:
#         world_count[world] += 1
#     else:
#         world_count[world] = 1
# counts_worlds = sorted(world_count.items(), key=lambda x: x[1], reverse=True)
# top_ten_worlds = counts_worlds[:10]
# print(world_count)
# print(top_ten_worlds)


# Создайте словарь со списком вещей для похода в качестве ключа и их массой в качестве значения. 
# Определите какие вещи влезут в рюкзак передав его максимальную грузоподъёмность. 
# Достаточно вернуть один допустимый вариант. *Верните все возможные варианты комплектации рюкзака.
def backpack(items, max_weight):
    combinations = []
    items.sort(reverse = True)
    def backtrack(current_items, current_weight, start):
        if current_weight == max_weight:
            combinations.append(current_items)
            return
        if current_weight > max_weight:
            return
        for i in range(start, len(items)):
            backtrack(current_items + [items[i]], current_weight + items[i][1], i + 1)
    backtrack([], 0, 0)
    return combinations

items = {'одежда': 5, 'техника': 3, 'гигиена': 4, 'еда': 6, 'другое':3, 'лекарства': 1}
max_weight = int(input("Введите целое максимальное число для рюкзака: "))

result = backpack(list(items.items()), max_weight)

for combination in result:
    print(combination)
# while max_weight > 0:
#     for key, value in items.items():
#         max_weight -= value
#         if max_weight > 0:
#             print(key, value)


"""
✔Создайте вручную кортеж содержащий элементы разных типов. 
✔Получите из него словарь списков, где: ключ — тип элемента, 
значение — список элементов данного типа.


✔Создайте вручную список с повторяющимися элементами. 
✔Удалите из него все элементы, которые встречаются дважды.



"""
# is_turple = ('qwe', True, 1, 'asd', 22.01, 12, [1, 2])

# my_list = [2, 5, 6, 77, 4, 4, 7, 7, 4, 3, 2]
# print(my_list)
# for i in my_list:
#     if my_list.count(i) == 2:
#         my_list.remove(i)

# print(my_list)

# sub_strings = inp_string.split()
# sub_strings.sort()

# max_len = 0
# for i in sub_strings:
#     if len(i) > max_len:
#         max_len = len(i)

# for i in range(len(sub_strings)):
#     print(f'{i}{sub_strings[i]:>{max_len + 1}}')

